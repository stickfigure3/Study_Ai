version: 1
applications:
  - appRoot: . # Specify the root of your application code relative to the repo root
    backend:
      phases:
        # Build phase is now handled by Amplify's container build process below
        # You might only need preBuild for installing non-Python dependencies if any
        # preBuild:
        #   commands:
        #     - yum update -y # Example for Amazon Linux
        #     - yum install -y postgresql-devel # Example if psycopg2 needed system libs
        build:
          commands:
            - echo "Amplify will handle the Docker build and push based on 'image' settings."
            # You could potentially run migrations here if needed and configured securely
            # - export FLASK_APP=app.py
            # - flask db upgrade # Requires DB connection configured in build env! Risky.
    # --- Add the 'image' section to configure container build ---
    image:
      # Path to the Dockerfile relative to the appRoot
      dockerfilePath: Dockerfile
      # ECR repository name (must exist in your account/region)
      repository: study_ai # Make sure this matches your ECR repo name
      # Optional: Specify build arguments if your Dockerfile uses ARG
      # buildArgs:
      #   key: value
frontend:
  phases:
    build:
      commands: []
  artifacts:
    baseDirectory: /
    files: []
  cache:
    paths: []